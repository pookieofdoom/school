#include <stdio.h>
#include "SmartAlloc.h" // #include "SmartAlloc.h" if not on IHS

typedef struct Node {
   int data;
   struct Node *next;
} Node;

void SwapPairs(Node **pHead) {
   Node *temp;
   temp = *pHead;
   *pHead = (*pHead)->next;

   while(temp && temp->next) {
      pHead = &(temp->next);
      printf("this is now *pHead %d\n", (*pHead)->data);
      temp->next = (*pHead)->next;
      //printf("this is temp %d\n", temp->data);
      printf("this is pHead->next %d\n", (*pHead)->data);
      //(*pHead)->next = temp;
      //printf("this is pHead->next %d\n", (*pHead)->next->data);
      //printf("hello\n");
      //printf("this is now *pHead %d\n", (*pHead)->data);
      temp = temp->next;
   
   }

     


}

int main() {
   Node **data;
   Node *head;
   int i, size;

   scanf("%d", &size);
   data = malloc(sizeof(Node *) * size);
   // Read in data
   for (i = 0; i < size; i++) {
      data[i] = malloc(sizeof(Node));
      scanf("%d", &data[i]->data);

   }   

   //Set up linked list
   for (i = 0; i < size; i++) {
      if (size - 1 == i) {
         data[i]->next = NULL;
      }   
      else {
         data[i]->next = data[i + 1]; 
      }   
   }   

   head = data[0];

   SwapPairs(&head);

   // Print in Node-Order
   printf("In Node Order: ");
   while (head) {
      printf("%d ", head->data);
      head = head->next;
   }
   printf("\n");

   // Print in List-Order
   printf("In List Order: ");
   for (i = 0; i < size; i++) {
      printf("%d ", data[i]->data);
   }
   printf("\n");

   return 0;
}
