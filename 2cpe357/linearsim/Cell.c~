#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include "Report.h"

#define MAX_FD 4

int main(int argc, char **argv) {
   int timeCounter = 0, outFileNdx = 0, inFileNdx = 0, vFlag = 0;
   int simNum, fdNdx;
   int writeFile[MAX_FD], readFile[MAX_FD];
   //int i;
   Report report; //the report that will be assigned values
   Report avgReport[2]; //array of reports that hold values thr read
   //printf("SUP BOIS\n");

   /*
   SN: Simulate from time 0 to time N, inclusive.
   ON: Transmit state to another program, via a pipe on file descriptor N.
   IN: Accept state from another program, via a pipe on file descriptor N.
   VX: Assume a fixed value of X (do not average neighboring values).
   DN: Use N as your unique ID number when reporting state on pipes.   
   */

   //walking down each argument while skipping the first one

   report.value = 0; // Redundant because C defaults it to zero anyway.
   while (*++argv) {
      //printf("this is command line %s\n", *argv);
      if (**argv == 'S') 
         timeCounter = atoi(++*argv);

      else if (**argv == 'O') {
         writeFile[outFileNdx] = atoi(++*argv);
         outFileNdx++;
      }

      else if (**argv == 'I') {
         readFile[inFileNdx] = atoi(++*argv);
         inFileNdx++;
      }

      else if (**argv == 'V') {
         report.value = atof(++*argv);
         vFlag = 1;
      }

      else if (**argv == 'D') {
         report.id = atoi(++*argv);
      }
   }
/*
   
   printf("this is id %d\n", report.id);
   for (i = 0; i < inFileNdx; i++) {
      printf("In: %d\n", readFile[i]);
   }
   for (i = 0; i < outFileNdx; i++) {
      printf("Out: %d\n", writeFile[i]);
   }
   */
   

   for (simNum = 0; simNum <= timeCounter; simNum++) {
      report.step = simNum;

      for (fdNdx = 0; fdNdx < outFileNdx; fdNdx++) {
         if (-1 == write(writeFile[fdNdx], &report, sizeof(Report)))
            exit(EXIT_FAILURE);
      }

      if (!vFlag) {
         for (fdNdx = 0; fdNdx < inFileNdx; fdNdx++) {
            //reading the cells and storing them into avgReport
            if (-1 == read(readFile[fdNdx], &avgReport[fdNdx], sizeof(Report)))
               exit(EXIT_FAILURE);
         }
         //take the average between the reports
         report.value = (avgReport[0].value + avgReport[1].value) / 2;
      }
   }
   //printf("cell done \n");
   exit(EXIT_SUCCESS);
}
