#include <stdio.h>
#include <stdlib.h>
#include <pcap.h>
#include "checksum.c"

#define ETHER_TYPE_ARP 0x806
#define ETHER_TYPE_IP 0x800
#define ARP_REQUEST 1
#define ARP_REPLY 2
#define PROTOCOL_TCP 6
#define PROTOCOL_UDP 17

typedef struct {
   u_char destMac[6];
   u_char sourceMac[6];
   u_short etherType; //IP, ARP, RARP, etc
} EthernetStruct;

typedef struct {
   short int opcode;
   u_char senderMac[6];
   u_char senderIp[4];
   u_char targetMac[6];
   u_char targetIp[4];

}ArpStruct;

typedef struct {
   u_char verHdrLen; //version (4bits) and header length (4bits)
   u_char tos; //type of service (1 octet)
   u_char unused[6];
   u_char ttl; //time to live
   u_char protocol;
   u_short checksum;
   u_char senderIp[4];
   u_char destIp[4];

}IpStruct;

void printMacAddress(u_char address[6], int length) {
   int i;
   for (i = 0; i < length; i++) {
      if (i != length - 1)
         printf("%x:", address[i]);
      else
         printf("%x\n", address[i]);
   }
}

void printIpAddress(u_char address[4], int length) {
   int i;
   for (i = 0; i < length; i++) {
      if (i != length -1)
         printf("%d.", address[i]);
      else
         printf("%d\n", address[i]);
   }
}

void ethernetParse(EthernetStruct *ethernet) {
   int i;
   printf("\tEthernet Header\n");
   
   printf("\t\tDest MAC: ");
   printMacAddress(ethernet->destMac, 6);
   
   printf("\t\tSource MAC: ");
   printMacAddress(ethernet->sourceMac, 6);
   
   if (ntohs(ethernet->etherType) == ETHER_TYPE_ARP)
      printf("\t\tType: ARP\n\n");
   else if(ntohs(ethernet->etherType) == ETHER_TYPE_IP)
      printf("\t\tType: IP\n\n");
}

void arpParse(ArpStruct *arpHdr) {
   printf("\tARP header\n");
   
   if (ntohs(arpHdr->opcode) == ARP_REQUEST) {
      printf("\t\tOpcode: Request\n");
   }
   else if (ntohs(arpHdr->opcode) == ARP_REPLY) {
      printf("\t\tOpcode: Reply\n");
   }
   
   printf("\t\tSender MAC: ");
   printMacAddress(arpHdr->senderMac, 6);
   
   printf("\t\tSender IP: ");
   printIpAddress(arpHdr->senderIp, 4);
   
   printf("\t\tTarget MAC: ");
   printMacAddress(arpHdr->targetMac, 6);
   
   printf("\t\tTarget IP: ");
   printIpAddress(arpHdr->targetIp, 4);
   printf("\n"); //need extra line to match output
}

void ipParse(IpStruct *ipHdr) {
   int len = (ipHdr->verHdrLen & 0x0f) * 4;
   u_short check = in_cksum((u_short*)(ipHdr),len);
   
   printf("\tIP Header\n");
   printf("\t\tIP Version: %d\n", ipHdr->verHdrLen >> 4);
   //mask the lower 4 bits and then multiply by 4
   
   printf("\t\tHeader Len (bytes): %d\n", len); 
   printf("\t\tTOS subfields:\n");
   printf("\t\t\tDiffserv bits: %d\n", ipHdr->tos >> 2);
   printf("\t\t\tECN bits: %d\n", ipHdr->tos & 0x03);
   
   printf("\t\tTTL: %d\n",ipHdr->ttl);
   printf("\t\tProtocol: ");
   if (ipHdr->protocol == PROTOCOL_UDP)
      printf("UDP\n");
   else if (ipHdr->protocol == PROTOCOL_TCP)
      printf("TCP\n");
   printf("\t\tChecksum: ");
   if (check == 0)
      printf("Correct ");
   else
      printf("Incorrect ");     
   printf("(0x%x)\n", ntohs(ipHdr->checksum)); 

   printf("\t\tSender IP: ");
   printIpAddress(ipHdr->senderIp, 4);
   printf("\t\tDest IP: ");
   printIpAddress(ipHdr->destIp, 4);
   
}

int main(int argc, char **argv) {
   pcap_t *handler;
   char errbuff[PCAP_ERRBUF_SIZE];
   struct pcap_pkthdr *header;
   const u_char *packet;
   EthernetStruct *ethernet;
   ArpStruct *arpHdr;
   IpStruct *ipHdr;
   int packetNumber = 0;
   
   if (argc != 2)  {
      fprintf(stderr, "only 1 argument, the pcap file is requred\n");
      exit(1);
   }
   handler = pcap_open_offline(argv[1], errbuff);
   if (handler == NULL) {
      fprintf(stderr, "error reading pcap file: %s\n", errbuff);
      exit(1);

   }
   
   while (pcap_next_ex(handler, &header, &packet) >= 0) {
      packetNumber++;
      printf("\nPacket number: %d", packetNumber);
      printf("  Packet Len: %d\n\n", header->caplen);
      ethernet = (EthernetStruct*)(packet);
      ethernetParse(ethernet);
 
      if (ntohs(ethernet->etherType) == ETHER_TYPE_ARP) {
         arpHdr = (ArpStruct*)(packet+14+6);
         arpParse(arpHdr);
      }
      else if (ntohs(ethernet->etherType) == ETHER_TYPE_IP) {
         ipHdr = (IpStruct*)(packet+14);
         ipParse(ipHdr);
         
      }
          
   }
   
   return 0;
   
}
